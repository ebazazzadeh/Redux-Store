{"version":3,"sources":["assets/spinner.gif","utils/redux/actions.js","utils/redux/reducers.js","utils/helpers.js","components/ProductItem/index.js","utils/queries.js","components/ProductList/index.js","components/CategoryMenu/index.js","components/CartItem/index.js","utils/auth.js","components/Cart/index.js","pages/Home.js","pages/Detail.js","components/Jumbotron/index.js","pages/NoMatch.js","utils/mutations.js","pages/Login.js","pages/Signup.js","components/Nav/index.js","pages/OrderHistory.js","pages/Success.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","UPDATE_PRODUCTS","products","type","UPDATE_CATEGORIES","categories","UPDATE_CURRENT_CATEGORY","currentCategory","ADD_TO_CART","cartOpen","cart","ADD_MULTIPLE_TO_CART","REMOVE_FROM_CART","UPDATE_CART_QUANTITY","CLEAR_CART","TOGGLE_CART","initialState","reducer","state","action","product","newState","filter","_id","length","map","purchaseQuantity","idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","oncomplete","close","ProductItem","item","image","name","price","quantity","useSelector","dispatch","useDispatch","className","to","alt","src","count","pluralize","onClick","iteminCart","find","parseInt","QUERY_PRODUCTS","gql","QUERY_CATEGORIES","QUERY_USER","QUERY_CHECKOUT","ProductList","useQuery","loading","data","useEffect","forEach","then","category","key","spinner","CategoryMenu","categoryData","id","CartItem","placeholder","value","onChange","target","role","aria-label","removeFromCart","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","stripePromise","loadStripe","Cart","useLazyQuery","getCheckout","toggleCart","a","getCart","res","redirectToCheckout","sessionId","checkout","session","sum","calculateTotal","Auth","loggedIn","productIds","i","push","variables","Home","Detail","useParams","useState","currentProduct","setCurrentProduct","description","cartItem","disabled","p","Jumbotron","children","style","height","clear","paddingTop","textAlign","NoMatch","LOGIN","ADD_ORDER","ADD_USER","Login","email","password","formState","setFormState","useMutation","login","error","handleFormSubmit","event","preventDefault","mutationResponse","handleChange","onSubmit","htmlFor","Signup","props","addUser","firstName","lastName","Nav","href","logout","OrderHistory","user","orders","order","purchaseDate","toLocaleDateString","index","Success","addOrder","setTimeout","saveOrder","createStore","client","ApolloClient","operation","setContext","headers","authorization","uri","App","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c27fb0ba.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.ab497855.gif\";","export const UPDATE_PRODUCTS = (products) => {\r\n  return {\r\n    type: \"UPDATE_PRODUCTS\",\r\n    products: [products],\r\n  };\r\n};\r\nexport const UPDATE_CATEGORIES = (categories) => {\r\n  return {\r\n    type: \"UPDATE_CATEGORIES\",\r\n    categories,\r\n  };\r\n};\r\nexport const UPDATE_CURRENT_CATEGORY = (currentCategory) => {\r\n  return {\r\n    type: \"UPDATE_CURRENT_CATEGORY\",\r\n    currentCategory,\r\n  };\r\n};\r\nexport const ADD_TO_CART = (cartOpen, cart) => {\r\n  return {\r\n    type: \"ADD_TO_CART\",\r\n    cartOpen,\r\n    cart: [cart],\r\n  };\r\n};\r\nexport const ADD_MULTIPLE_TO_CART = (cart) => {\r\n  return {\r\n    type: \"ADD_MULTIPLE_TO_CART\",\r\n    cart: [cart],\r\n  };\r\n};\r\nexport const REMOVE_FROM_CART = (cartOpen, cart) => {\r\n  return {\r\n    type: \"REMOVE_FROM_CART\",\r\n    cartOpen,\r\n    cart,\r\n  };\r\n};\r\nexport const UPDATE_CART_QUANTITY = (cartOpen, cart) => {\r\n  return {\r\n    type: \"UPDATE_CART_QUANTITY\",\r\n    cartOpen,\r\n    cart,\r\n  };\r\n};\r\nexport const CLEAR_CART = (cartOpen, cart) => {\r\n  return {\r\n    type: \"CLEAR_CART\",\r\n    cartOpen,\r\n    cart,\r\n  };\r\n};\r\nexport const TOGGLE_CART = (cartOpen) => {\r\n  return {\r\n    type: \"TOGGLE_CART\",\r\n    cartOpen,\r\n  };\r\n};\r\n","import { useReducer } from \"react\";\r\n\r\nimport {\r\n  UPDATE_PRODUCTS,\r\n  UPDATE_CURRENT_CATEGORY,\r\n  UPDATE_CATEGORIES,\r\n  ADD_TO_CART,\r\n  ADD_MULTIPLE_TO_CART,\r\n  REMOVE_FROM_CART,\r\n  UPDATE_CART_QUANTITY,\r\n  CLEAR_CART,\r\n  TOGGLE_CART,\r\n} from \"./actions\";\r\n\r\nconst initialState = {\r\n  products: [],\r\n  cart: [],\r\n  cartOpen: false,\r\n  categories: [],\r\n  currentCategory: \"\",\r\n};\r\n\r\nexport const reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    // if action type value is the value of `UPDATE_PRODUCTS`, return a new state object with an updated products array\r\n    case UPDATE_PRODUCTS:\r\n      return {\r\n        ...state,\r\n        products: [...action.products],\r\n      };\r\n\r\n    case UPDATE_CATEGORIES:\r\n      return {\r\n        ...state,\r\n        categories: [...action.categories],\r\n      };\r\n\r\n    case UPDATE_CURRENT_CATEGORY:\r\n      return {\r\n        ...state,\r\n        currentCategory: action.currentCategory,\r\n      };\r\n    case ADD_TO_CART:\r\n      return {\r\n        ...state,\r\n        cartOpen: true,\r\n        cart: [...state.cart, action.product],\r\n      };\r\n\r\n    case ADD_MULTIPLE_TO_CART:\r\n      return {\r\n        ...state,\r\n        cart: [...state.cart, ...action.products],\r\n      };\r\n\r\n    case REMOVE_FROM_CART:\r\n      let newState = state.cart.filter((product) => {\r\n        return product._id !== action._id;\r\n      });\r\n\r\n      return {\r\n        ...state,\r\n        cartOpen: newState.length > 0,\r\n        cart: newState,\r\n      };\r\n\r\n    case UPDATE_CART_QUANTITY:\r\n      return {\r\n        ...state,\r\n        cartOpen: true,\r\n        cart: state.cart.map((product) => {\r\n          if (action._id === product._id) {\r\n            product.purchaseQuantity = action.purchaseQuantity;\r\n          }\r\n          return product;\r\n        }),\r\n      };\r\n\r\n    case CLEAR_CART:\r\n      return {\r\n        ...state,\r\n        cartOpen: false,\r\n        cart: [],\r\n      };\r\n\r\n    case TOGGLE_CART:\r\n      return {\r\n        ...state,\r\n        cartOpen: !state.cartOpen,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const useProductReducer = (initialState) => {\r\n  return useReducer(reducer, initialState);\r\n};\r\n","export function pluralize(name, count) {\r\n  if (count === 1) {\r\n    return name;\r\n  }\r\n  return name + \"s\";\r\n}\r\n\r\n// Before we fill out the actual IndexedDB portion of this function,\r\n// let's consider how we'll set this up and use it. Remember, IndexedDB is asynchronous\r\n// and event driven. This means that if we want it to be on and listening all the time,\r\n// we'll have to write a lot of what-if type functionality to handle all of the moving parts.\r\n// Instead, we'll use one function that opens the database connection,\r\n// creates the object store (if it's the first time using it on the machine),\r\n// and runs whatever transaction we need to have run on a successful connection.\r\n// So when we call the function, we'll open the connection to the database\r\n// and then connect to the object store that we pass in as storeName.\r\n// Then we'll perform a transaction, using the method\r\n// and object values to help carry it out. We also wrap the whole thing in a Promise,\r\n// making it a lot easier to work with IndexedDB's asynchronous nature.\r\nexport function idbPromise(storeName, method, object) {\r\n  return new Promise((resolve, reject) => {\r\n    // open connection to the database 'shop-shop' with the version of 1\r\n    const request = indexedDB.open(\"shop-shop\", 1);\r\n\r\n    // create variables to hold reference to the database, transaction (tx), and object store\r\n    let db, tx, store;\r\n\r\n    // if version has changed (or this is the first time using the database),\r\n    // run this method and create the three object stores\r\n    request.onupgradeneeded = function (e) {\r\n      const db = request.result;\r\n      // create object store for each type of data and set \"primary\" key index to be the `_id` of the data\r\n      db.createObjectStore(\"products\", { keyPath: \"_id\" });\r\n      db.createObjectStore(\"categories\", { keyPath: \"_id\" });\r\n      db.createObjectStore(\"cart\", { keyPath: \"_id\" });\r\n    };\r\n\r\n    // handle any errors with connecting\r\n    request.onerror = function (e) {\r\n      console.log(\"There was an error\");\r\n    };\r\n\r\n    // on db open success\r\n    request.onsuccess = function (e) {\r\n      // save  a ref of the database to the db varible\r\n      db = request.result;\r\n\r\n      // open a transaction do whatever we pass into storename (must match one of the object store names)\r\n      tx = db.transaction(storeName, \"readwrite\");\r\n\r\n      // save a reference to that object store\r\n      store = tx.objectStore(storeName);\r\n\r\n      // if there is error, let us know\r\n      db.onerror = function (e) {\r\n        console.log(\"error\", e);\r\n      };\r\n\r\n      switch (method) {\r\n        // overwrites any data with the matching _id value from the object\r\n        // and adding it if it can't find a match.\r\n        case \"put\":\r\n          store.put(object);\r\n          resolve(object);\r\n          break;\r\n\r\n        // get all data from that store and return it\r\n        case \"get\":\r\n          const all = store.getAll();\r\n          all.onsuccess = function () {\r\n            resolve(all.result);\r\n          };\r\n          break;\r\n\r\n        case \"delete\":\r\n          store.delete(object._id);\r\n          break;\r\n\r\n        default:\r\n          console.log(\"No valid method\");\r\n          break;\r\n      }\r\n\r\n      // when the transaction is complete, close the connection\r\n      tx.oncomplete = function () {\r\n        db.close();\r\n      };\r\n    };\r\n  });\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { pluralize } from \"../../utils/helpers\";\r\n// import { useStoreContext } from \"../../utils/GlobalState\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { idbPromise } from \"../../utils/helpers\";\r\n\r\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from \"../../utils/redux/actions\";\r\n\r\nfunction ProductItem(item) {\r\n  const { image, name, _id, price, quantity } = item;\r\n\r\n  // const [state, dispatch] = useStoreContext();\r\n  const state = useSelector((state) => state);\r\n  const dispatch = useDispatch();\r\n  const { cart } = state;\r\n\r\n  const addToCart = () => {\r\n    // find the cart item with the matching id\r\n    const iteminCart = cart.find((item) => item._id === _id);\r\n\r\n    if (iteminCart) {\r\n      dispatch({\r\n        type: UPDATE_CART_QUANTITY,\r\n        _id: _id,\r\n        purchaseQuantity: parseInt(iteminCart.purchaseQuantity) + 1,\r\n      });\r\n      idbPromise(\"cart\", \"put\", {\r\n        ...iteminCart,\r\n        purchaseQuantity: parseInt(iteminCart.purchaseQuantity) + 1,\r\n      });\r\n    } else {\r\n      dispatch({\r\n        type: ADD_TO_CART,\r\n        product: { ...item, purchaseQuantity: 1 },\r\n      });\r\n      idbPromise(\"cart\", \"put\", { ...item, purchaseQuantity: 1 });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"card px-1 py-1\">\r\n      <Link to={`/products/${_id}`}>\r\n        <img alt={name} src={`/images/${image}`} />\r\n        <p>{name}</p>\r\n      </Link>\r\n      <div>\r\n        <div>\r\n          {quantity} {pluralize(\"item\", quantity)} in stock\r\n        </div>\r\n        <span>${price}</span>\r\n      </div>\r\n      <button onClick={addToCart}>Add to cart</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProductItem;\r\n","import gql from \"graphql-tag\";\r\n\r\nexport const QUERY_PRODUCTS = gql`\r\n  query getProducts($category: ID) {\r\n    products(category: $category) {\r\n      _id\r\n      name\r\n      description\r\n      price\r\n      quantity\r\n      image\r\n      category {\r\n        _id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const QUERY_ALL_PRODUCTS = gql`\r\n  {\r\n    products {\r\n      _id\r\n      name\r\n      description\r\n      price\r\n      quantity\r\n      category {\r\n        name\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const QUERY_CATEGORIES = gql`\r\n  {\r\n    categories {\r\n      _id\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\nexport const QUERY_USER = gql`\r\n  {\r\n    user {\r\n      firstName\r\n      lastName\r\n      orders {\r\n        _id\r\n        purchaseDate\r\n        products {\r\n          _id\r\n          name\r\n          description\r\n          price\r\n          quantity\r\n          image\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const QUERY_CHECKOUT = gql`\r\n  query getCheckout($products: [ID]!) {\r\n    checkout(products: $products) {\r\n      session\r\n    }\r\n  }\r\n`;\r\n","import React, { useEffect } from \"react\";\r\nimport { useQuery } from \"@apollo/react-hooks\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport ProductItem from \"../ProductItem\";\r\nimport { QUERY_PRODUCTS } from \"../../utils/queries\";\r\nimport spinner from \"../../assets/spinner.gif\";\r\n\r\n// import { useStoreContext } from \"../../utils/GlobalState\";\r\nimport { UPDATE_PRODUCTS } from \"../../utils/redux/actions\";\r\nimport { idbPromise } from \"../../utils/helpers\";\r\n\r\nfunction ProductList() {\r\n  // Again, we immediately execute the useStoreContext() function to retrieve\r\n  // the current global state object and the dipatch() method to update state.\r\n\r\n  // const [state, dispatch] = useStoreContext();\r\n  const state = useSelector((state) => state);\r\n  const dispatch = useDispatch();\r\n  const { currentCategory } = state;\r\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\r\n\r\n  useEffect(() => {\r\n    // if there's data to be stored\r\n    if (data) {\r\n      // let's store it in the global state object\r\n      dispatch({\r\n        type: UPDATE_PRODUCTS,\r\n        products: data.products,\r\n      });\r\n\r\n      // but let's also take each product and save it to IndexedDB using the helper function\r\n      data.products.forEach((product) => {\r\n        idbPromise(\"products\", \"put\", product);\r\n      });\r\n    }\r\n    // add else if to check if `loading` is undefined in `useQuery()` Hook\r\n    else if (!loading) {\r\n      // since we're offline, get all of the data from the `products` store\r\n      idbPromise(\"products\", \"get\").then((products) => {\r\n        // use retrieved data to set global state for  offline browsing\r\n        dispatch({\r\n          type: UPDATE_PRODUCTS,\r\n          products: products,\r\n        });\r\n      });\r\n    }\r\n  }, [data, loading, dispatch]);\r\n\r\n  function filterProducts() {\r\n    if (!currentCategory) {\r\n      return state.products;\r\n    }\r\n\r\n    return state.products.filter(\r\n      (product) => product.category._id === currentCategory\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"my-2\">\r\n      <h2>Our Products:</h2>\r\n      {state.products.length ? (\r\n        <div className=\"flex-row\">\r\n          {filterProducts().map((product) => (\r\n            <ProductItem\r\n              key={product._id}\r\n              _id={product._id}\r\n              image={product.image}\r\n              name={product.name}\r\n              price={product.price}\r\n              quantity={product.quantity}\r\n            />\r\n          ))}\r\n        </div>\r\n      ) : (\r\n        <h3>You haven't added any products yet!</h3>\r\n      )}\r\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProductList;\r\n","import React, { useEffect } from \"react\";\r\nimport {useSelector, useDispatch} from 'react-redux'\r\nimport { useQuery } from \"@apollo/react-hooks\";\r\n\r\nimport { idbPromise } from \"../../utils/helpers\";\r\n\r\nimport { QUERY_CATEGORIES } from \"../../utils/queries\";\r\n// import { useStoreContext } from \"../../utils/GlobalState\";\r\nimport {\r\n  UPDATE_CURRENT_CATEGORY,\r\n  UPDATE_CATEGORIES,\r\n  UPDATE_CART_QUANTITY,\r\n} from \"../../utils/redux/actions\";\r\n\r\nfunction CategoryMenu() {\r\n  // const [state, dispatch] = useStoreContext();\r\n  const state = useSelector((state) => state);\r\n  const dispatch = useDispatch();\r\n\r\n  const { categories } = state;\r\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\r\n\r\n  // useEffect() Hook works. It is a function that takes two arguments,\r\n  // a function to run given a certain condition, and then the condition.\r\n  // In this case, the function runs immediately on load\r\n  // and passes in our function to update the global state\r\n  // and then the data that we're dependent on, categoryData and dispatch.\r\n  // Now, categoryData is going to be undefined on load\r\n  // because the useQuery() Hook isn't done with its request just yet,\r\n  // meaning that if statement will not run.\r\n  useEffect(() => {\r\n    // if categoryData exists or has changed from the response of useQuery, then run dispatch()\r\n    if (categoryData) {\r\n      // execute dispatch funciton with our action object indicating the type\r\n      // of action and the data to set our state for categories to\r\n      dispatch({\r\n        type: UPDATE_CATEGORIES,\r\n        categories: categoryData.categories,\r\n      });\r\n      categoryData.categories.forEach((category) => {\r\n        idbPromise(\"categories\", \"put\", category);\r\n      });\r\n    } else if (!loading) {\r\n      dispatch({\r\n        type: UPDATE_CART_QUANTITY,\r\n        categories: categories,\r\n      });\r\n    }\r\n  }, [categoryData, loading, dispatch]);\r\n\r\n  const handleClick = (id) => {\r\n    dispatch({\r\n      type: UPDATE_CURRENT_CATEGORY,\r\n      currentCategory: id,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Choose a Category:</h2>\r\n      {categories.map((item) => (\r\n        <button\r\n          key={item._id}\r\n          onClick={() => {\r\n            handleClick(item._id);\r\n          }}\r\n        >\r\n          {item.name}\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CategoryMenu;\r\n","import React from \"react\";\r\n// import { useStoreContext } from \"../../utils/GlobalState\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport {\r\n  REMOVE_FROM_CART,\r\n  UPDATE_CART_QUANTITY,\r\n} from \"../../utils/redux/actions\";\r\nimport { idbPromise } from \"../../utils/helpers\";\r\n\r\nconst CartItem = ({ item }) => {\r\n  // const [, dispatch] = useStoreContext();\r\n  const dispatch = useDispatch();\r\n\r\n  // Note that we only destructured the dispatch() function from the useStoreContext Hook,\r\n  // because the CartItem component has no need to read state.\r\n  const removeFromCart = (item) => {\r\n    dispatch({\r\n      type: REMOVE_FROM_CART,\r\n      _id: item._id,\r\n    });\r\n    idbPromise(\"cart\", \"delete\", { ...item }); // pass all key:value pairs from an object\r\n  };\r\n\r\n  const onChange = (e) => {\r\n    const value = e.target.value;\r\n\r\n    if (value === \"0\") {\r\n      dispatch({\r\n        type: REMOVE_FROM_CART,\r\n        _id: item._id,\r\n      });\r\n      idbPromise(\"cart\", \"delete\", { ...item });\r\n    } else {\r\n      dispatch({\r\n        type: UPDATE_CART_QUANTITY,\r\n        _id: item._id,\r\n        purchaseQuantity: parseInt(value),\r\n      });\r\n      idbPromise(\"cart\", \"put\", { ...item, purchaseQuantity: parseInt(value) });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex-row\">\r\n      <div>\r\n        <img src={`/images/${item.image}`} alt=\"\" />\r\n      </div>\r\n      <div>\r\n        <div>\r\n          {item.name}, ${item.price}\r\n        </div>\r\n        <div>\r\n          <span>Qty:</span>\r\n          <input\r\n            type=\"number\"\r\n            placeholder=\"1\"\r\n            value={item.purchaseQuantity}\r\n            onChange={onChange}\r\n          />{\" \"}\r\n          <span\r\n            role=\"img\"\r\n            aria-label=\"trash\"\r\n            onClick={() => removeFromCart(item)}\r\n          >\r\n            🗑️\r\n          </span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CartItem;\r\n","import decode from 'jwt-decode';\r\n\r\nclass AuthService {\r\n  getProfile() {\r\n    return decode(this.getToken());\r\n  }\r\n\r\n  loggedIn() {\r\n    // Checks if there is a saved token and it's still valid\r\n    const token = this.getToken();\r\n    return !!token && !this.isTokenExpired(token);\r\n  }\r\n\r\n  isTokenExpired(token) {\r\n    try {\r\n      const decoded = decode(token);\r\n      if (decoded.exp < Date.now() / 1000) {\r\n        return true;\r\n      } else return false;\r\n    } catch (err) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  getToken() {\r\n    // Retrieves the user token from localStorage\r\n    return localStorage.getItem('id_token');\r\n  }\r\n\r\n  login(idToken) {\r\n    // Saves user token to localStorage\r\n    localStorage.setItem('id_token', idToken);\r\n\r\n    window.location.assign('/');\r\n  }\r\n\r\n  logout() {\r\n    // Clear user token and profile data from localStorage\r\n    localStorage.removeItem('id_token');\r\n    // this will reload the page and reset the state of the application\r\n    window.location.assign('/');\r\n  }\r\n}\r\n\r\nexport default new AuthService();\r\n","import React, { useEffect } from \"react\";\r\nimport { loadStripe } from \"@stripe/stripe-js\";\r\nimport { useLazyQuery } from \"@apollo/react-hooks\";\r\nimport { QUERY_CHECKOUT } from \"../../utils/queries\";\r\nimport { idbPromise } from \"../../utils/helpers\";\r\nimport CartItem from \"../CartItem\";\r\nimport Auth from \"../../utils/auth\";\r\nimport \"./style.css\";\r\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from \"../../utils/redux/actions\";\r\n// import { useStoreContext } from \"../../utils/GlobalState\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nconst stripePromise = loadStripe(\"pk_test_TYooMQauvdEDq54NiTphI7jx\");\r\n\r\nconst Cart = () => {\r\n  // The data variable will contain the checkout session,\r\n  // but only after the query is called with the getCheckout() function.\r\n  // const [state, dispatch] = useStoreContext();\r\n  const [getCheckout, { data }] = useLazyQuery(QUERY_CHECKOUT);\r\n  const state = useSelector((state) => state);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    async function getCart() {\r\n      const cart = await idbPromise(\"cart\", \"get\");\r\n      dispatch({ type: ADD_MULTIPLE_TO_CART, products: [...cart] });\r\n    }\r\n\r\n    if (!state.cart.length) {\r\n      getCart();\r\n    }\r\n  }, [state.cart.length, dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      stripePromise.then((res) => {\r\n        res.redirectToCheckout({ sessionId: data.checkout.session });\r\n      });\r\n    }\r\n  }, [data]);\r\n\r\n  function toggleCart() {\r\n    dispatch({ type: TOGGLE_CART });\r\n  }\r\n\r\n  function calculateTotal() {\r\n    let sum = 0;\r\n    state.cart.forEach((item) => {\r\n      sum += item.price * item.purchaseQuantity;\r\n    });\r\n    return sum;\r\n  }\r\n\r\n  function submitCheckout() {\r\n    const productIds = [];\r\n\r\n    state.cart.forEach((item) => {\r\n      for (let i = 0; i < item.purchaseQuantity; i++) {\r\n        productIds.push(item._id);\r\n      }\r\n    });\r\n    getCheckout({\r\n      variables: { products: productIds },\r\n    });\r\n  }\r\n\r\n  console.log(state);\r\n\r\n  if (!state.cartOpen) {\r\n    return (\r\n      <div className=\"cart-closed\" onClick={toggleCart}>\r\n        <span role=\"img\" aria-label=\"trash\">\r\n          🛒\r\n        </span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"cart\">\r\n      <div className=\"close\" onClick={toggleCart}>\r\n        [close]\r\n      </div>\r\n      <h2>Shopping Cart</h2>\r\n      {state.cart.length ? (\r\n        <div>\r\n          {state.cart.map((item) => (\r\n            <CartItem key={item._id} item={item} />\r\n          ))}\r\n          <div className=\"flex-row space-between\">\r\n            <strong>Total: ${calculateTotal()}</strong>\r\n            {Auth.loggedIn() ? (\r\n              <button onClick={submitCheckout}>Checkout</button>\r\n            ) : (\r\n              <span>(log in to check out)</span>\r\n            )}\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <h3>\r\n          <span role=\"img\" aria-label=\"shocked\">\r\n            😱\r\n          </span>\r\n          You haven't added anything to your cart yet!\r\n        </h3>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default Cart;\r\n","import React, { useState } from \"react\";\r\nimport ProductList from \"../components/ProductList\";\r\nimport CategoryMenu from \"../components/CategoryMenu\";\r\nimport Cart from \"../components/Cart\";\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div className=\"container\">\r\n      <CategoryMenu />\r\n      <ProductList />\r\n      <Cart />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import { useQuery } from \"@apollo/react-hooks\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport spinner from \"../assets/spinner.gif\";\r\nimport Cart from \"../components/Cart\";\r\nimport {\r\n  ADD_TO_CART,\r\n  REMOVE_FROM_CART,\r\n  UPDATE_CART_QUANTITY,\r\n  UPDATE_PRODUCTS,\r\n} from \"../utils/redux/actions\";\r\n\r\n// import { useStoreContext } from \"../utils/GlobalState\";\r\nimport {useSelector, useDispatch} from 'react-redux'\r\n\r\nimport { QUERY_PRODUCTS } from \"../utils/queries\";\r\nimport { idbPromise } from \"../utils/helpers\";\r\n\r\nfunction Detail() {\r\n  // const [state, dispatch] = useStoreContext();\r\n\r\n  const state = useSelector(state => state);\r\n  const dispatch = useDispatch();\r\n\r\n  const { id } = useParams();\r\n\r\n  const [currentProduct, setCurrentProduct] = useState({});\r\n\r\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\r\n\r\n  // const products = data?.products || [];\r\n\r\n  const { products, cart } = state;\r\n\r\n  const addToCart = () => {\r\n    const iteminCart = cart.find((cartItem) => cartItem._id === id);\r\n\r\n    if (iteminCart) {\r\n      dispatch({\r\n        type: UPDATE_CART_QUANTITY,\r\n        _id: id,\r\n        purchaseQuantity: parseInt(iteminCart.purchaseQuantity) + 1,\r\n      });\r\n      // if we're updating quantity, use existing item data and increment purchaseQuantity value by one\r\n      idbPromise(\"cart\", \"put\", {\r\n        ...iteminCart,\r\n        purchaseQuantity: parseInt(iteminCart.purchaseQuantity) + 1,\r\n      });\r\n    } else {\r\n      dispatch({\r\n        type: ADD_TO_CART,\r\n        product: { ...currentProduct, purchaseQuantity: 1 },\r\n      });\r\n      // if product is not in the cart yet, add it to the current shopping cart in indexedDB\r\n      idbPromise(\"cart\", \"put\", { ...currentProduct, purchaseQuantity: 1 });\r\n    }\r\n  };\r\n\r\n  const removeFromCart = () => {\r\n    dispatch({\r\n      type: REMOVE_FROM_CART,\r\n      _id: currentProduct._id,\r\n    });\r\n    // upon removal from cart, delete the item from indexedDB using the 'currentProduct._id' to locate what to remove\r\n    idbPromise(\"cart\", \"delete\", { ...currentProduct });\r\n  };\r\n\r\n  // What happens if someone just sent you this product's URL\r\n  // and this is the first time you've loaded this application?\r\n\r\n  // If that's the case, then you wouldn't have any products saved\r\n  // in global state just yet. The useEffect() Hook is set up so that if we don't,\r\n  // we'll use the product data that we returned from the useQuery() Hook\r\n  // to set the product data to the global state object.\r\n  // When that's complete, we run through this all over again.\r\n  // But this time, there is data in the products array,\r\n  // and then we run setCurrentProduct() to display a single product's data.\r\n\r\n  // This is why there are so many items in the second argument of the useEffect() Hook.\r\n  // The Hook's functionality is dependent on them to work\r\n  // and only runs when it detects that they've changed in value!\r\n  // This is known as the dependency array.\r\n  useEffect(() => {\r\n    if (products.length) {\r\n      setCurrentProduct(products.find((product) => product._id === id));\r\n    } else if (data) {\r\n      dispatch({\r\n        type: UPDATE_PRODUCTS,\r\n        products: data.products,\r\n      });\r\n      data.products.forEach((product) => {\r\n        idbPromise(\"products\", \"put\", product);\r\n      });\r\n    } else if (!loading) {\r\n      idbPromise(\"products\", \"get\").then((products) => {\r\n        dispatch({\r\n          type: UPDATE_PRODUCTS,\r\n          products: products,\r\n        });\r\n      });\r\n    }\r\n  }, [products, id, dispatch, data, loading]);\r\n\r\n  return (\r\n    <>\r\n      {currentProduct ? (\r\n        <div className=\"container my-1\">\r\n          <Link to=\"/\">← Back to Products</Link>\r\n\r\n          <h2>{currentProduct.name}</h2>\r\n\r\n          <p>{currentProduct.description}</p>\r\n\r\n          <p>\r\n            <strong>Price:</strong>${currentProduct.price}{\" \"}\r\n            <button onClick={addToCart}>Add to Cart</button>\r\n            <button\r\n              disabled={!cart.find((p) => p._id === currentProduct._id)}\r\n              onClick={removeFromCart}\r\n            >\r\n              Remove from Cart\r\n            </button>\r\n          </p>\r\n\r\n          <img\r\n            src={`/images/${currentProduct.image}`}\r\n            alt={currentProduct.name}\r\n          />\r\n        </div>\r\n      ) : null}\r\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\r\n      <Cart />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Detail;\r\n","import React from \"react\";\r\n\r\nfunction Jumbotron({ children }) {\r\n  return (\r\n    <div\r\n      style={{ height: 560, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Jumbotron;\r\n","import React from \"react\";\r\nimport Jumbotron from \"../components/Jumbotron\";\r\n\r\nconst NoMatch = () => {\r\n  return (\r\n    <div>\r\n      <Jumbotron>\r\n        <h1>404 Page Not Found</h1>\r\n        <h1>\r\n          <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\r\n            🙄\r\n          </span>\r\n        </h1>\r\n      </Jumbotron>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NoMatch;\r\n","import gql from 'graphql-tag';\r\n\r\nexport const LOGIN = gql`\r\n  mutation login($email: String!, $password: String!) {\r\n    login(email: $email, password: $password) {\r\n      token\r\n      user {\r\n        _id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\n\r\nexport const ADD_ORDER = gql`\r\n  mutation addOrder($products: [ID]!) {\r\n    addOrder(products: $products) {\r\n      purchaseDate\r\n      products {\r\n        _id\r\n      name\r\n      description\r\n      price\r\n      quantity\r\n      category {\r\n        name\r\n      } \r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\n\r\nexport const ADD_USER = gql`\r\n  mutation addUser($firstName: String!, $lastName: String!, $email: String!, $password: String!) {\r\n    addUser(firstName: $firstName, lastName: $lastName, email: $email, password: $password) {\r\n      token\r\n      user {\r\n        _id\r\n      }\r\n    }\r\n  }\r\n`;","import React, { useState } from \"react\";\r\nimport { useMutation } from \"@apollo/react-hooks\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { LOGIN } from \"../utils/mutations\";\r\nimport Auth from \"../utils/auth\";\r\n\r\nfunction Login() {\r\n  const [formState, setFormState] = useState({ email: \"\", password: \"\" });\r\n  const [login, { error }] = useMutation(LOGIN);\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n    try {\r\n      const mutationResponse = await login({\r\n        variables: { email: formState.email, password: formState.password },\r\n      });\r\n      const token = mutationResponse.data.login.token;\r\n      Auth.login(token);\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setFormState({\r\n      ...formState,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"container my-1\">\r\n      <Link to=\"/signup\">← Go to Signup</Link>\r\n\r\n      <h2>Login</h2>\r\n      <form onSubmit={handleFormSubmit}>\r\n        <div className=\"flex-row space-between my-2\">\r\n          <label htmlFor=\"email\">Email address:</label>\r\n          <input\r\n            placeholder=\"youremail@test.com\"\r\n            name=\"email\"\r\n            type=\"email\"\r\n            id=\"email\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"flex-row space-between my-2\">\r\n          <label htmlFor=\"pwd\">Password:</label>\r\n          <input\r\n            placeholder=\"******\"\r\n            name=\"password\"\r\n            type=\"password\"\r\n            id=\"pwd\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        {error ? (\r\n          <div>\r\n            <p className=\"error-text\">The provided credentials are incorrect</p>\r\n          </div>\r\n        ) : null}\r\n        <div className=\"flex-row flex-end\">\r\n          <button type=\"submit\">Submit</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport Auth from \"../utils/auth\";\r\nimport { ADD_USER } from \"../utils/mutations\";\r\n\r\nfunction Signup(props) {\r\n  const [formState, setFormState] = useState({ email: '', password: '' });\r\n  const [addUser] = useMutation(ADD_USER);\r\n\r\n  const handleFormSubmit = async event => {\r\n    event.preventDefault();\r\n    const mutationResponse = await addUser({\r\n      variables: {\r\n        email: formState.email, password: formState.password,\r\n        firstName: formState.firstName, lastName: formState.lastName\r\n      }\r\n    });\r\n    const token = mutationResponse.data.addUser.token;\r\n    Auth.login(token);\r\n  };\r\n\r\n  const handleChange = event => {\r\n    const { name, value } = event.target;\r\n    setFormState({\r\n      ...formState,\r\n      [name]: value\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"container my-1\">\r\n      <Link to=\"/login\">\r\n        ← Go to Login\r\n      </Link>\r\n\r\n      <h2>Signup</h2>\r\n      <form onSubmit={handleFormSubmit}>\r\n        <div className=\"flex-row space-between my-2\">\r\n          <label htmlFor=\"firstName\">First Name:</label>\r\n          <input\r\n            placeholder=\"First\"\r\n            name=\"firstName\"\r\n            type=\"firstName\"\r\n            id=\"firstName\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"flex-row space-between my-2\">\r\n          <label htmlFor=\"lastName\">Last Name:</label>\r\n          <input\r\n            placeholder=\"Last\"\r\n            name=\"lastName\"\r\n            type=\"lastName\"\r\n            id=\"lastName\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"flex-row space-between my-2\">\r\n          <label htmlFor=\"email\">Email:</label>\r\n          <input\r\n            placeholder=\"youremail@test.com\"\r\n            name=\"email\"\r\n            type=\"email\"\r\n            id=\"email\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"flex-row space-between my-2\">\r\n          <label htmlFor=\"pwd\">Password:</label>\r\n          <input\r\n            placeholder=\"******\"\r\n            name=\"password\"\r\n            type=\"password\"\r\n            id=\"pwd\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"flex-row flex-end\">\r\n          <button type=\"submit\">\r\n            Submit\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n\r\n}\r\n\r\nexport default Signup;\r\n","import React from \"react\";\r\nimport Auth from \"../../utils/auth\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Nav() {\r\n\r\n  function showNavigation() {\r\n    if (Auth.loggedIn()) {\r\n      return (\r\n        <ul className=\"flex-row\">\r\n          <li className=\"mx-1\">\r\n            <Link to=\"/orderHistory\">\r\n              Order History\r\n            </Link>\r\n          </li>\r\n          <li className=\"mx-1\">\r\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\r\n            <a href=\"/\" onClick={() => Auth.logout()}>\r\n              Logout\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      );\r\n    } else {\r\n      return (\r\n        <ul className=\"flex-row\">\r\n          <li className=\"mx-1\">\r\n            <Link to=\"/signup\">\r\n              Signup\r\n            </Link>\r\n          </li>\r\n          <li className=\"mx-1\">\r\n            <Link to=\"/login\">\r\n              Login\r\n            </Link>\r\n          </li>\r\n        </ul>\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <header className=\"flex-row px-1\">\r\n      <h1>\r\n        <Link to=\"/\">\r\n          <span role=\"img\" aria-label=\"shopping bag\">🛍️</span>\r\n          -Shop-Shop\r\n        </Link>\r\n      </h1>\r\n\r\n      <nav>\r\n        {showNavigation()}\r\n      </nav>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { QUERY_USER } from \"../utils/queries\";\r\n\r\nfunction OrderHistory() {\r\n  const { data } = useQuery(QUERY_USER);\r\n  let user;\r\n\r\n  if (data) {\r\n    user = data.user;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container my-1\">\r\n        <Link to=\"/\">\r\n          ← Back to Products\r\n          </Link>\r\n\r\n        {user ? (\r\n          <>\r\n            <h2>Order History for {user.firstName} {user.lastName}</h2>\r\n            {user.orders.map((order) => (\r\n              <div key={order._id} className=\"my-2\">\r\n                <h3>{new Date(parseInt(order.purchaseDate)).toLocaleDateString()}</h3>\r\n                <div className=\"flex-row\">\r\n                  {order.products.map(({ _id, image, name, price }, index) => (\r\n                    <div key={index} className=\"card px-1 py-1\">\r\n                      <Link to={`/products/${_id}`}>\r\n                        <img\r\n                          alt={name}\r\n                          src={`/images/${image}`}\r\n                        />\r\n                        <p>{name}</p>\r\n                      </Link>\r\n                      <div>\r\n                        <span>${price}</span>\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </>\r\n        ) : null}\r\n\r\n      </div>\r\n\r\n    </>)\r\n\r\n};\r\n\r\nexport default OrderHistory;\r\n","import React, { useEffect } from \"react\";\r\nimport { useMutation } from \"@apollo/react-hooks\";\r\n\r\nimport Jumbotron from \"../components/Jumbotron\";\r\nimport { ADD_ORDER } from \"../utils/mutations\";\r\nimport { idbPromise } from \"../utils/helpers\";\r\nfunction Success() {\r\n  const [addOrder] = useMutation(ADD_ORDER);\r\n\r\n  useEffect(() => {\r\n    async function saveOrder() {\r\n      const cart = await idbPromise(\"cart\", \"get\");\r\n      const products = cart.map((item) => item._id);\r\n\r\n      if (products.length) {\r\n        const { data } = await addOrder({ variables: { products } });\r\n        const productData = data.addOrder.products;\r\n\r\n        productData.forEach((item) => {\r\n          idbPromise(\"cart\", \"delete\", item);\r\n        });\r\n      }\r\n\r\n      setTimeout(() => {\r\n        window.location.assign(\"/\");\r\n      }, 3000);\r\n    }\r\n\r\n    saveOrder();\r\n  }, [addOrder]);\r\n\r\n  return (\r\n    <div>\r\n      <Jumbotron>\r\n        <h1>Success!</h1>\r\n        <h2>Thank you for your purchase!</h2>\r\n        <h2>You will now be redirected to the homepage</h2>\r\n      </Jumbotron>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Success;\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport { ApolloProvider } from \"@apollo/react-hooks\";\r\nimport ApolloClient from \"apollo-boost\";\r\n\r\n// import { StoreProvider } from \"./utils/GlobalState\";\r\nimport { createStore } from \"redux\";\r\nimport { Provider } from \"react-redux\";\r\nimport { reducer } from \"./utils/redux/reducers\";\r\n\r\nimport Home from \"./pages/Home\";\r\nimport Detail from \"./pages/Detail\";\r\nimport NoMatch from \"./pages/NoMatch\";\r\nimport Login from \"./pages/Login\";\r\nimport Signup from \"./pages/Signup\";\r\nimport Nav from \"./components/Nav\";\r\nimport OrderHistory from \"./pages/OrderHistory\";\r\nimport Success from \"./pages/Success\";\r\n\r\nconst store = createStore(reducer);\r\n\r\nconst client = new ApolloClient({\r\n  request: (operation) => {\r\n    const token = localStorage.getItem(\"id_token\");\r\n    operation.setContext({\r\n      headers: {\r\n        authorization: token ? `Bearer ${token}` : \"\",\r\n      },\r\n    });\r\n  },\r\n  uri: \"/graphql\",\r\n});\r\n\r\nfunction App() {\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <Router>\r\n        <div>\r\n          {/* <StoreProvider> */}\r\n          <Provider store={store}>\r\n            <Nav />\r\n            <Switch>\r\n              <Route exact path=\"/\" component={Home} />\r\n              <Route exact path=\"/login\" component={Login} />\r\n              <Route exact path=\"/signup\" component={Signup} />\r\n              <Route exact path=\"/orderHistory\" component={OrderHistory} />\r\n              <Route exact path=\"/products/:id\" component={Detail} />\r\n              <Route exact path=\"/success\" component={Success} />\r\n              <Route component={NoMatch} />\r\n            </Switch>\r\n          </Provider>\r\n          {/* </StoreProvider> */}\r\n        </div>\r\n      </Router>\r\n    </ApolloProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.0/8 are considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\nexport function register(config) {\r\n  if (\r\n    process.env.NODE_ENV === 'production' &&\r\n    'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();"],"sourceRoot":""}